###################################
#  DESCRIPTION
#  Rescale partial charges generated by antechamber such that they sum up to an integer
#
#  Inputs: inpcrd files generate by tleap_lig.in 
#  Outputs: _netcharge.mol2 files
####################################

import parmed as pmd
import glob
from parmed.tools import netCharge
from mdfptools.Extractor import *
import argparse

parser = argparse.ArgumentParser(description='Partial charges generated by antechamber do not sum up to an integer. Re-distribute the excess charge on every partial charge.')
#parser.add_argument('-isdf', metavar='input_file.sdf', help='input SDF file', required = True)
args = parser.parse_args()


coord_files = glob.glob("*inpcrd")

# function to rescale charges such that they sum to an integer.
# It calculates the difference between the integer and the sum of charges and it redistributes it on all atoms
# Because of numerical errors, the sum of charges will still be different from an integer and this difference will be attributed to the first atom
def rescale_charges(top_lig):
    charges = [i.charge for i in top_lig.atoms]
    to_rescale = np.around(np.sum(charges)) - np.sum(charges)
    for i in top_lig.atoms:
        i.charge = np.around(i.charge + to_rescale/len(top_lig.atoms), decimals= 6)
    charges = [i.charge for i in top_lig.atoms]
    #charges = np.around(charges, decimals = 6)
    to_rescale2 = np.around(np.sum(charges)) - np.sum(charges)
    top_lig.atoms[0].charge = top_lig.atoms[0].charge + to_rescale2
    charges = [i.charge for i in top_lig.atoms]
    print("Net charge = {}".format(np.sum(charges)))
    return top_lig


for coord in coord_files:
    mol_name = coord.split(".")[0]
    #convert prmtop and inpcrd into top and gro
    amber = pmd.load_file('{}.prmtop'.format(mol_name),coord)
    rescale_charges(amber)
    #
    try:
        amber.save('{}_netcharge.mol2'.format(mol_name))
    except: 
        print ("{}_netcharge.mol2 already exists. No overwrite".format(mol_name))
    #try:
    #     amber.save('{}_netcharge.top'.format(mol_name))
    #except: 
    #    print ("{}_netcharge.top already exists. No overwrite".format(mol_name))

